// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class AudioFormatEncoder : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AudioFormatEncoder(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioFormatEncoder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AudioFormatEncoder() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Audio360CSharpPINVOKE.delete_AudioFormatEncoder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual uint encode(float[] inputInterleavedAudio, uint totalNumSamples, bool endOfStream) {
    uint ret = Audio360CSharpPINVOKE.AudioFormatEncoder_encode(swigCPtr, inputInterleavedAudio, totalNumSamples, endOfStream);
    return ret;
  }

  public virtual AudioFormat getAudioFormat() {
    AudioFormat ret = (AudioFormat)Audio360CSharpPINVOKE.AudioFormatEncoder_getAudioFormat(swigCPtr);
    return ret;
  }

  public virtual EngineError getQualityIndex(ref int qualityIndex) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioFormatEncoder_getQualityIndex(swigCPtr, ref qualityIndex);
    return ret;
  }

  public virtual EngineError getBitRate(ref int bitRate) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioFormatEncoder_getBitRate(swigCPtr, ref bitRate);
    return ret;
  }

  public virtual float getOutputSampleRate() {
    float ret = Audio360CSharpPINVOKE.AudioFormatEncoder_getOutputSampleRate(swigCPtr);
    return ret;
  }

  public virtual int getNumOfChannels() {
    int ret = Audio360CSharpPINVOKE.AudioFormatEncoder_getNumOfChannels(swigCPtr);
    return ret;
  }

  public virtual uint getMaxBufferSize() {
    uint ret = Audio360CSharpPINVOKE.AudioFormatEncoder_getMaxBufferSize(swigCPtr);
    return ret;
  }

  public static EngineError getBitRateForQualityIndex(AudioFormat format, int qualityIndex, ref int bitRate) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioFormatEncoder_getBitRateForQualityIndex((int)format, qualityIndex, ref bitRate);
    return ret;
  }

  public static EngineError getIndexForQuality(AudioFormat format, AudioFormatQuality quality, ref int qualityIndex) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioFormatEncoder_getIndexForQuality((int)format, (int)quality, ref qualityIndex);
    return ret;
  }

  public static AudioFormatEncoder create(IOStream outputStream, AudioFormat format, float inputSampleRate, float outputSampleRate, uint maxBufferSize, int numChannels, AudioFormatQuality quality) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioFormatEncoder_create(IOStream.getCPtr(outputStream), (int)format, inputSampleRate, outputSampleRate, maxBufferSize, numChannels, (int)quality);
    AudioFormatEncoder ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioFormatEncoder(cPtr, true);
    return ret;
  }

}

}
