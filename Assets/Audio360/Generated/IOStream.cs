// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class IOStream : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IOStream(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IOStream obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IOStream() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Audio360CSharpPINVOKE.delete_IOStream(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual uint getPosition() {
    uint ret = Audio360CSharpPINVOKE.IOStream_getPosition(swigCPtr);
    return ret;
  }

  public virtual bool setPosition(long pos) {
    bool ret = Audio360CSharpPINVOKE.IOStream_setPosition__SWIG_0(swigCPtr, pos);
    return ret;
  }

  public virtual bool setPosition(long pos, int mode) {
    bool ret = Audio360CSharpPINVOKE.IOStream_setPosition__SWIG_1(swigCPtr, pos, mode);
    return ret;
  }

  public virtual int pushBackByte(int c) {
    int ret = Audio360CSharpPINVOKE.IOStream_pushBackByte(swigCPtr, c);
    return ret;
  }

  public virtual uint getSize() {
    uint ret = Audio360CSharpPINVOKE.IOStream_getSize(swigCPtr);
    return ret;
  }

  public virtual bool canSeek() {
    bool ret = Audio360CSharpPINVOKE.IOStream_canSeek(swigCPtr);
    return ret;
  }

  public virtual bool ready() {
    bool ret = Audio360CSharpPINVOKE.IOStream_ready(swigCPtr);
    return ret;
  }

  public virtual bool endOfStream() {
    bool ret = Audio360CSharpPINVOKE.IOStream_endOfStream(swigCPtr);
    return ret;
  }

  public virtual int getFD() {
    int ret = Audio360CSharpPINVOKE.IOStream_getFD(swigCPtr);
    return ret;
  }

  public static IOStream createFileStream(string file, IOStream.StreamOptions options, AssetDescriptor ad) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.IOStream_createFileStream__SWIG_0(file, (int)options, AssetDescriptor.getCPtr(ad));
    IOStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOStream(cPtr, true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IOStream createFileStream(string file, IOStream.StreamOptions options) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.IOStream_createFileStream__SWIG_1(file, (int)options);
    IOStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOStream(cPtr, true);
    return ret;
  }

  public static IOStream createMemoryStream(global::System.IntPtr buffer, uint sizeInBytes, uint offsetInBytes) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.IOStream_createMemoryStream__SWIG_0(buffer, sizeInBytes, offsetInBytes);
    IOStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOStream(cPtr, true);
    return ret;
  }

  public static IOStream createMemoryStream(global::System.IntPtr buffer, uint sizeInBytes) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.IOStream_createMemoryStream__SWIG_1(buffer, sizeInBytes);
    IOStream ret = (cPtr == global::System.IntPtr.Zero) ? null : new IOStream(cPtr, true);
    return ret;
  }

  public virtual uint read(byte[] data, uint numBytes) {
    uint ret = Audio360CSharpPINVOKE.IOStream_read(swigCPtr, data, numBytes);
    return ret;
  }

  public virtual uint write(byte[] data, uint numBytes) {
    uint ret = Audio360CSharpPINVOKE.IOStream_write(swigCPtr, data, numBytes);
    return ret;
  }

  public enum StreamOptions {
    READ_BINARY,
    WRITE_BINARY,
    READ_WRITE_BINARY
  }

}

}
