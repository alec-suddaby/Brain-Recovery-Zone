// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class EventTransport : TransportControl {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal EventTransport(global::System.IntPtr cPtr, bool cMemoryOwn) : base(Audio360CSharpPINVOKE.EventTransport_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(EventTransport obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual EngineError open(string nameAndPath) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.EventTransport_open__SWIG_0(swigCPtr, nameAndPath);
    return ret;
  }

  public virtual EngineError open(global::System.IntPtr buffer, uint size) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.EventTransport_open__SWIG_1(swigCPtr, buffer, size);
    return ret;
  }

  public virtual EngineError open(float tempo, byte timeSigNumerator, byte timeSigDenominator, float lengthInBars) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.EventTransport_open__SWIG_2(swigCPtr, tempo, timeSigNumerator, timeSigDenominator, lengthInBars);
    return ret;
  }

  public virtual void close() {
    Audio360CSharpPINVOKE.EventTransport_close(swigCPtr);
  }

  public virtual bool isOpen() {
    bool ret = Audio360CSharpPINVOKE.EventTransport_isOpen(swigCPtr);
    return ret;
  }

  public virtual EngineError setEventCallback(EventTransportCallback callback, global::System.IntPtr userData) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.EventTransport_setEventCallback(swigCPtr, callback, userData);
    return ret;
  }

  public virtual EngineError getEvents(EventTransportCallback callback, global::System.IntPtr userData, uint startSample, uint numSamples) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.EventTransport_getEvents(swigCPtr, callback, userData, startSample, numSamples);
    return ret;
  }

  public virtual bool enableLooping(bool loop) {
    bool ret = Audio360CSharpPINVOKE.EventTransport_enableLooping(swigCPtr, loop);
    return ret;
  }

  public virtual bool loopingEnabled() {
    bool ret = Audio360CSharpPINVOKE.EventTransport_loopingEnabled(swigCPtr);
    return ret;
  }

  public virtual void setSpeed(float speed) {
    Audio360CSharpPINVOKE.EventTransport_setSpeed(swigCPtr, speed);
  }

  public virtual float getSpeed() {
    float ret = Audio360CSharpPINVOKE.EventTransport_getSpeed(swigCPtr);
    return ret;
  }

  public virtual EngineError seekToSample(uint timeInSamples) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.EventTransport_seekToSample(swigCPtr, timeInSamples);
    return ret;
  }

  public virtual EngineError seekToMs(float timeInMs) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.EventTransport_seekToMs(swigCPtr, timeInMs);
    return ret;
  }

  public virtual uint getElapsedTimeInSamples() {
    uint ret = Audio360CSharpPINVOKE.EventTransport_getElapsedTimeInSamples(swigCPtr);
    return ret;
  }

  public virtual float getElapsedTimeInMs() {
    float ret = Audio360CSharpPINVOKE.EventTransport_getElapsedTimeInMs(swigCPtr);
    return ret;
  }

  public virtual float getElapsedTimeInBars() {
    float ret = Audio360CSharpPINVOKE.EventTransport_getElapsedTimeInBars(swigCPtr);
    return ret;
  }

  public virtual uint getAssetDurationInSamples() {
    uint ret = Audio360CSharpPINVOKE.EventTransport_getAssetDurationInSamples(swigCPtr);
    return ret;
  }

  public virtual float getAssetDurationInMs() {
    float ret = Audio360CSharpPINVOKE.EventTransport_getAssetDurationInMs(swigCPtr);
    return ret;
  }

  public virtual float getAssetDurationInBars() {
    float ret = Audio360CSharpPINVOKE.EventTransport_getAssetDurationInBars(swigCPtr);
    return ret;
  }

  public virtual uint getEventCount() {
    uint ret = Audio360CSharpPINVOKE.EventTransport_getEventCount(swigCPtr);
    return ret;
  }

  public virtual float getTempo() {
    float ret = Audio360CSharpPINVOKE.EventTransport_getTempo(swigCPtr);
    return ret;
  }

  public virtual byte getTimeSignatureNumerator() {
    byte ret = Audio360CSharpPINVOKE.EventTransport_getTimeSignatureNumerator(swigCPtr);
    return ret;
  }

  public virtual byte getTimeSignatureDenominator() {
    byte ret = Audio360CSharpPINVOKE.EventTransport_getTimeSignatureDenominator(swigCPtr);
    return ret;
  }

}

}
