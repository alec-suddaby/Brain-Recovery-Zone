// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class SpatDecoderInterface : Object3D {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SpatDecoderInterface(global::System.IntPtr cPtr, bool cMemoryOwn) : base(Audio360CSharpPINVOKE.SpatDecoderInterface_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SpatDecoderInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual void enableFocus(bool enableFocus, bool followListener) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_enableFocus(swigCPtr, enableFocus, followListener);
  }

  public virtual void setFocusProperties(float offFocusLevel, float focusWidth) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_setFocusProperties(swigCPtr, offFocusLevel, focusWidth);
  }

  public virtual void setOffFocusLeveldB(float offFocusLevelDB) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_setOffFocusLeveldB(swigCPtr, offFocusLevelDB);
  }

  public virtual void setFocusWidthDegrees(float focusWidthDegrees) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_setFocusWidthDegrees(swigCPtr, focusWidthDegrees);
  }

  public virtual void setFocusOrientationQuat(TBQuat focusQuat) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_setFocusOrientationQuat(swigCPtr, TBQuat.getCPtr(focusQuat));
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setVolume(float linearGain, float rampTimeMs, bool forcePreviousRamp) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_setVolume__SWIG_0(swigCPtr, linearGain, rampTimeMs, forcePreviousRamp);
  }

  public virtual void setVolume(float linearGain, float rampTimeMs) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_setVolume__SWIG_1(swigCPtr, linearGain, rampTimeMs);
  }

  public virtual void setVolumeDecibels(float dB, float rampTimeMs, bool forcePreviousRamp) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_setVolumeDecibels__SWIG_0(swigCPtr, dB, rampTimeMs, forcePreviousRamp);
  }

  public virtual void setVolumeDecibels(float dB, float rampTimeMs) {
    Audio360CSharpPINVOKE.SpatDecoderInterface_setVolumeDecibels__SWIG_1(swigCPtr, dB, rampTimeMs);
  }

  public virtual float getVolume() {
    float ret = Audio360CSharpPINVOKE.SpatDecoderInterface_getVolume(swigCPtr);
    return ret;
  }

  public virtual float getVolumeDecibels() {
    float ret = Audio360CSharpPINVOKE.SpatDecoderInterface_getVolumeDecibels(swigCPtr);
    return ret;
  }

  public virtual EngineError setEventCallback(EventCallback callback, global::System.IntPtr userData) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.SpatDecoderInterface_setEventCallback(swigCPtr, callback, userData);
    return ret;
  }

  public virtual EngineError bypassReverbSend(bool bypass) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.SpatDecoderInterface_bypassReverbSend(swigCPtr, bypass);
    return ret;
  }

  public virtual bool isReverbSendBypassed() {
    bool ret = Audio360CSharpPINVOKE.SpatDecoderInterface_isReverbSendBypassed(swigCPtr);
    return ret;
  }

  public virtual EngineError setReverbSendLevel(float level) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.SpatDecoderInterface_setReverbSendLevel(swigCPtr, level);
    return ret;
  }

  public virtual float getReverbSendLevel() {
    float ret = Audio360CSharpPINVOKE.SpatDecoderInterface_getReverbSendLevel(swigCPtr);
    return ret;
  }

  public virtual EngineError addEffectInsert(EffectIndex effectIndex, EffectType effectType) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.SpatDecoderInterface_addEffectInsert(swigCPtr, (int)effectIndex, (int)effectType);
    return ret;
  }

  public virtual EngineError removeEffectInsert(EffectIndex effectIndex) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.SpatDecoderInterface_removeEffectInsert(swigCPtr, (int)effectIndex);
    return ret;
  }

  public virtual EngineError bypassEffectInsert(EffectIndex effectIndex, bool bypass) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.SpatDecoderInterface_bypassEffectInsert(swigCPtr, (int)effectIndex, bypass);
    return ret;
  }

  public virtual EngineError setEffectInsertParam(EffectIndex effectIndex, EffectParam effectParam, float value) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.SpatDecoderInterface_setEffectInsertParam(swigCPtr, (int)effectIndex, (int)effectParam, value);
    return ret;
  }

  public virtual float getEffectInsertParam(EffectIndex effectIndex, EffectParam effectParam) {
    float ret = Audio360CSharpPINVOKE.SpatDecoderInterface_getEffectInsertParam(swigCPtr, (int)effectIndex, (int)effectParam);
    return ret;
  }

  public virtual bool isEffectInsertActive(EffectIndex effectIndex) {
    bool ret = Audio360CSharpPINVOKE.SpatDecoderInterface_isEffectInsertActive(swigCPtr, (int)effectIndex);
    return ret;
  }

  public virtual bool isEffectInsertBypassed(EffectIndex effectIndex) {
    bool ret = Audio360CSharpPINVOKE.SpatDecoderInterface_isEffectInsertBypassed(swigCPtr, (int)effectIndex);
    return ret;
  }

  public virtual EffectType getEffectType(EffectIndex effectIndex) {
    EffectType ret = (EffectType)Audio360CSharpPINVOKE.SpatDecoderInterface_getEffectType(swigCPtr, (int)effectIndex);
    return ret;
  }

}

}
